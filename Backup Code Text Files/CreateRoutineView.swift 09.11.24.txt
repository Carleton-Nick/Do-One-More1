// CreateRoutineView.swift
// Making tons of changes, trying to implement nameable/moveable custom headers.  On that journey, it's transformed into a page where you can create a routine from an "All Exercises" list that populates a "Selected Exercises" list as you build.  
// This version still has appearance issues, but it builds, so I'm backing it up. 

import SwiftUI

struct CreateRoutineView: View {
    @Binding var routines: [Routine]
    @State private var routineName: String = ""
    @State private var selectedExercises: [Exercise] = []
    @State private var showAlert = false
    @State private var showingNewExerciseView = false
    @State var exercises: [Exercise] = UserDefaultsManager.loadExercises() // Load exercises on startup
    @Environment(\.theme) var theme // Inject the global theme
    @Environment(\.dismiss) var dismiss

    var hasValidInput: Bool {
        !routineName.isEmpty
    }

    var body: some View {
        ZStack {
            theme.backgroundColor.edgesIgnoringSafeArea(.all) // Set the entire view's background

            VStack(alignment: .leading) {
                // Section: Routine Name
                VStack(alignment: .leading, spacing: 10) {
                    Text("Routine Name")
                        .font(theme.secondaryFont)
                        .foregroundColor(theme.primaryColor)

                    // Name Input Field
                    TextField("", text: $routineName)
                        .font(theme.secondaryFont)
                        .foregroundColor(.white)
                        .padding()
                        .background(theme.backgroundColor) // Remove white background
                        .cornerRadius(5)
                        .overlay(
                            RoundedRectangle(cornerRadius: 5)
                                .stroke(theme.primaryColor, lineWidth: 1) // Orange border around the text field
                        )
                        .customPlaceholder(show: routineName.isEmpty, placeholder: "Name")
                }
                .padding(.horizontal)

                // All Exercises Section
                VStack(alignment: .leading, spacing: 10) {
                    Text("All Exercises")
                        .font(theme.secondaryFont)
                        .foregroundColor(theme.primaryColor)
                        .padding(.leading)

                    // List of All Exercises
                    List(exercises, id: \.self) { exercise in
                        MultipleSelectionRow(title: exercise.name, isSelected: selectedExercises.contains(exercise)) {
                            if selectedExercises.contains(exercise) {
                                selectedExercises.removeAll { $0 == exercise }
                            } else {
                                selectedExercises.append(exercise)
                            }
                        }
                        .foregroundColor(.white)
                        .overlay(
                            RoundedRectangle(cornerRadius: 5)
                                .stroke(theme.primaryColor, lineWidth: 1)
                        )
                    }
                    .listStyle(InsetListStyle())  // Use .listStyle(InsetListStyle()) instead of .insetGroupedListStyle
                    .scrollContentBackground(.hidden) // Hide the white background
                    .background(theme.backgroundColor) // Set to match app's theme
                    .cornerRadius(8) // Corner radius to match the theme
                    .padding(.horizontal)

                    // "Create New Exercise" Button
                    Button(action: {
                        showingNewExerciseView = true
                    }) {
                        Text("Create New Exercise")
                            .font(theme.secondaryFont)
                            .foregroundColor(theme.buttonTextColor)
                            .padding(theme.buttonPadding)
                            .background(theme.buttonBackgroundColor)
                            .cornerRadius(theme.buttonCornerRadius)
                    }
                    .sheet(isPresented: $showingNewExerciseView) {
                        NewExerciseView(exercises: $exercises)
                            .onDisappear {
                                UserDefaultsManager.saveExercises(exercises)
                                if let lastCreatedExercise = exercises.last {
                                    selectedExercises.append(lastCreatedExercise)
                                }
                            }
                    }
                    .padding(.leading)
                }

                // Selected Exercises Section
                VStack(alignment: .leading, spacing: 10) {
                    Text("Selected Exercises")
                        .font(theme.secondaryFont)
                        .foregroundColor(theme.primaryColor)
                        .padding(.leading)

                    // List of Selected Exercises
                    List {
                        ForEach(selectedExercises, id: \.self) { exercise in
                            Text(exercise.name)
                                .font(theme.secondaryFont)
                                .foregroundColor(.white)
                                .padding()
                                .overlay(
                                    RoundedRectangle(cornerRadius: 8)
                                        .stroke(theme.primaryColor, lineWidth: 1)
                                )
                                .listRowBackground(theme.backgroundColor)
                        }
                        .onMove(perform: moveExercise)
                    }
                    .listStyle(InsetListStyle())  // Changed to .listStyle(InsetListStyle()) for the "Selected Exercises" list
                    .scrollContentBackground(.hidden) // Hide the default white background
                    .background(theme.backgroundColor) // Match the background to the appâ€™s theme
                    .cornerRadius(8)
                    .padding(.horizontal)
                    .toolbar {
                        EditButton() // To rearrange the selected exercises
                    }
                }

                // Save Routine Button
                Button(action: saveRoutine) {
                    Text("Save Routine")
                        .font(theme.secondaryFont)
                        .foregroundColor(hasValidInput ? theme.buttonTextColor : theme.secondaryColor)
                        .padding(theme.buttonPadding)
                        .background(theme.buttonBackgroundColor)
                        .cornerRadius(theme.buttonCornerRadius)
                }
                .disabled(!hasValidInput)
                .alert(isPresented: $showAlert) {
                    Alert(title: Text("Routine Saved"), message: nil, dismissButton: .default(Text("OK")) {
                        dismiss() // Dismiss the current view and go back to RoutineListView
                    })
                }
                .padding(.top, 10)
                .padding(.horizontal)
            }
            .padding(.top)
        }
        .navigationBarTitleDisplayMode(.inline)
        .toolbar {
            ToolbarItem(placement: .principal) {
                UnderlinedTitle(title: "Create A Routine")
            }
        }
        .onAppear {
            exercises = UserDefaultsManager.loadExercises() // Load latest exercises from global storage
        }
    }

    // Reorder exercises in the selected list
    func moveExercise(from source: IndexSet, to destination: Int) {
        selectedExercises.move(fromOffsets: source, toOffset: destination)
    }

    // Save the new routine
    func saveRoutine() {
        guard !routineName.isEmpty else { return }

        let newRoutine = Routine(name: routineName, exercises: selectedExercises)
        routines.append(newRoutine)
        UserDefaultsManager.saveRoutines(routines)
        showAlert = true
    }
}

struct CreateRoutineView_Previews: PreviewProvider {
    static var previews: some View {
        CreateRoutineView(routines: .constant([]))
            .environment(\.theme, AppTheme()) // Preview with the theme applied
    }
}