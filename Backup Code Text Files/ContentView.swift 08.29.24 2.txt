08.29.24

13:10

Added a new view to create new exercises separate from the main screen, and ability to choose certain metrics without having to show all at once. 

//
//  ContentView.swift
//  Do One More
//
//  Created by Nick Carleton on 6/26/24.
//

import SwiftUI

struct ContentView: View {
    @State var selectedExerciseType: String
    @State var exerciseType = ""
    @State var setRecords: [SetRecord] = [SetRecord()]
    @State var savedWorkouts: [Workout] = []
    @State var exerciseTypes: [String] = []
    @State var exercises: [Exercise] = [] // New array to store exercises
    @State private var showAlert = false
    @State private var showingNewExerciseView = false
    var fromRoutine: Bool
    @Environment(\.theme) var theme

    init(selectedExerciseType: String = "", fromRoutine: Bool = false) {
        _selectedExerciseType = State(initialValue: selectedExerciseType)
        self.fromRoutine = fromRoutine
    }

    var hasValidInput: Bool {
        let validExercise = !selectedExerciseType.isEmpty || !exerciseType.isEmpty
        let validDetailsInput = setRecords.allSatisfy { record in
            record.weight?.isEmpty == false ||
            record.reps != nil ||
            record.elapsedTime?.isEmpty == false ||
            record.distance?.isEmpty == false ||
            record.calories?.isEmpty == false ||
            record.custom?.isEmpty == false
        }
        return validExercise && validDetailsInput
    }

    var body: some View {
        NavigationStack {
            VStack {
                Spacer(minLength: 0)

                // Section: Choose or Create Exercise
                VStack(alignment: .leading, spacing: 10) {
                    Text("Choose or Create Exercise")
                        .customSectionHeaderStyle()

                    HStack {
                        Picker(selection: $selectedExerciseType, label: Text("")) {
                            Text("New").tag("New")
                            ForEach(exercises.map { $0.name }, id: \.self) { exercise in
                                Text(exercise)
                                    .foregroundColor(theme.primaryColor)
                            }
                        }
                        .padding(.leading, 5)
                        .onChange(of: selectedExerciseType) { oldValue, newValue in
                            if newValue == "New" {
                                exerciseType = ""
                                setRecords = [SetRecord()]
                            } else {
                                exerciseType = newValue
                                if findPreviousWorkout() == nil {
                                    setRecords = [SetRecord()]
                                }
                            }
                        }
                        .frame(maxWidth: .infinity)
                        .overlay(RoundedRectangle(cornerRadius: 5).stroke(theme.primaryColor, lineWidth: 1))
                    }

                    // Always show the text field when "New" is selected
                    if selectedExerciseType == "New" {
                        TextField("", text: $exerciseType)
                            .foregroundColor(.white)
                            .padding(8)
                            .background(theme.backgroundColor)
                            .cornerRadius(5)
                            .overlay(RoundedRectangle(cornerRadius: 5).stroke(theme.primaryColor, lineWidth: 1))
                            .customPlaceholder(show: exerciseType.isEmpty, placeholder: "New Exercise Name")
                    }
                }

                // Navigation to NewExerciseView using the new API
                Button("Create New Exercise") {
                    showingNewExerciseView = true
                }
                .padding()
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(8)
                .navigationDestination(isPresented: $showingNewExerciseView) {
                    NewExerciseView(exercises: $exercises)
                }

                // Section: Exercise Details
                if let currentExercise = exercises.first(where: { $0.name == selectedExerciseType }) {
                    ForEach(currentExercise.selectedMetrics, id: \.self) { metric in
                        if metric == .weight {
                            TextField("Weight (lbs)", text: bindingForWeight(at: 0))
                                .customFormFieldStyle()
                        }
                        if metric == .reps {
                            TextField("Reps", text: bindingForReps(at: 0))
                                .customFormFieldStyle()
                        }
                        if metric == .time {
                            TextField("Time (Minutes)", text: bindingForElapsedTime(at: 0))
                                .customFormFieldStyle()
                        }
                        if metric == .distance {
                            TextField("Distance (Miles)", text: bindingForDistance(at: 0))
                                .customFormFieldStyle()
                        }
                        if metric == .calories {
                            TextField("Calories Burned", text: bindingForCalories(at: 0))
                                .customFormFieldStyle()
                        }
                        if metric == .custom {
                            TextField("Notes", text: bindingForCustomNotes(at: 0))
                                .customFormFieldStyle()
                        }
                    }
                }

                // Place both buttons directly below the Exercise Details section
                HStack {
                    Button(action: {
                        setRecords.append(SetRecord())
                    }) {
                        Text("Add Set")
                    }
                    .font(theme.secondaryFont)
                    .foregroundColor(theme.buttonTextColor)
                    .padding(theme.buttonPadding)
                    .background(theme.buttonBackgroundColor)
                    .cornerRadius(theme.buttonCornerRadius)

                    Spacer()

                    Button(action: saveWorkout) {
                        Text("Save Set")
                            .foregroundColor(hasValidInput ? theme.buttonTextColor : Color.gray)
                    }
                    .font(theme.secondaryFont)
                    .padding(theme.buttonPadding)
                    .background(theme.buttonBackgroundColor)
                    .cornerRadius(theme.buttonCornerRadius)
                    .disabled(!hasValidInput)
                    .alert(isPresented: $showAlert) {
                        Alert(title: Text("Set Saved!"), dismissButton: .default(Text("OK")) {
                            clearInputFields()
                        })
                    }
                }

                Spacer(minLength: 0)

                // Navigation Links
                VStack(spacing: 10) {
                    NavigationLink(destination: RoutineListView()) {
                        Text("Manage Routines")
                    }
                    .font(theme.secondaryFont)
                    .foregroundColor(theme.buttonTextColor)
                    .padding(theme.buttonPadding)
                    .background(theme.buttonBackgroundColor)
                    .cornerRadius(theme.buttonCornerRadius)

                    NavigationLink(destination: WorkoutListView()) {
                        Text("View Saved Workouts")
                    }
                    .font(theme.secondaryFont)
                    .foregroundColor(theme.buttonTextColor)
                    .padding(theme.buttonPadding)
                    .background(theme.buttonBackgroundColor)
                    .cornerRadius(theme.buttonCornerRadius)
                }
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .background(theme.backgroundColor.edgesIgnoringSafeArea(.all))
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .principal) {
                    UnderlinedTitle(title: "Do One More")
                }
            }
            .onAppear(perform: loadSavedWorkouts)
        }
        .onAppear {
            if fromRoutine {
                exerciseType = selectedExerciseType
                if let previousWorkout = findPreviousWorkout() {
                    setRecords = previousWorkout.sets
                } else {
                    setRecords = [SetRecord()]
                }
            }

            // Default to "New" if no exercise is selected
            if selectedExerciseType.isEmpty {
                selectedExerciseType = "New"
                exerciseType = ""
            }
        }
    }

    // MARK: - Workout Management Functions

    func saveWorkout() {
        guard hasValidInput else {
            showAlert = true
            return
        }

        let filledSetRecords = setRecords.compactMap { record -> SetRecord? in
            let weight = record.weight?.isEmpty ?? true ? nil : record.weight
            let reps = record.reps
            let elapsedTime = record.elapsedTime?.isEmpty ?? true ? nil : record.elapsedTime
            let distance = record.distance?.isEmpty ?? true ? nil : record.distance
            let calories = record.calories?.isEmpty ?? true ? nil : record.calories
            let custom = record.custom?.isEmpty ?? true ? nil : record.custom

            return SetRecord(weight: weight, reps: reps, elapsedTime: elapsedTime, distance: distance, calories: calories, custom: custom)
        }

        let workout = Workout(exerciseType: exerciseType, sets: filledSetRecords)

        if let index = savedWorkouts.firstIndex(where: { $0.exerciseType == workout.exerciseType }) {
            savedWorkouts[index] = workout
        } else {
            savedWorkouts.append(workout)
            exerciseTypes.append(workout.exerciseType)
        }

        saveExerciseTypes()

        if let encoded = try? JSONEncoder().encode(savedWorkouts) {
            UserDefaults.standard.set(encoded, forKey: "workouts")
        }

        // Show the alert
        showAlert = true
    }

    func clearInputFields() {
        exerciseType = ""
        setRecords = [SetRecord()]
        selectedExerciseType = "New"
    }

    func loadSavedWorkouts() {
        savedWorkouts = loadWorkouts()
        let routineExercises = loadRoutineExercises()
        exerciseTypes = Array(Set(savedWorkouts.map { $0.exerciseType } + routineExercises)).sorted()
    }

    func findPreviousWorkout() -> Workout? {
        return savedWorkouts.filter { $0.exerciseType == selectedExerciseType }.last
    }

    func loadWorkouts() -> [Workout] {
        if let savedWorkouts = UserDefaults.standard.data(forKey: "workouts"),
           let decodedWorkouts = try? JSONDecoder().decode([Workout].self, from: savedWorkouts) {
            return decodedWorkouts
        }
        return []
    }

    func loadRoutineExercises() -> [String] {
        if let savedRoutines = UserDefaults.standard.data(forKey: "routines"),
           let decodedRoutines = try? JSONDecoder().decode([Routine].self, from: savedRoutines) {
            return decodedRoutines.flatMap { $0.exercises }
        }
        return []
    }

    func saveExerciseTypes() {
        let uniqueExerciseTypes = Array(Set(savedWorkouts.map { $0.exerciseType }))
        if let encoded = try? JSONEncoder().encode(uniqueExerciseTypes) {
            UserDefaults.standard.set(encoded, forKey: "exerciseTypes")
        }
    }

    func loadExerciseTypes() {
        if let savedExerciseTypes = UserDefaults.standard.data(forKey: "exerciseTypes"),
           let decodedExerciseTypes = try? JSONDecoder().decode([String].self, from: savedExerciseTypes) {
            exerciseTypes = decodedExerciseTypes
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView(selectedExerciseType: "", fromRoutine: false)
            .environment(\.theme, AppTheme()) // Inject the theme for a consistent preview
    }
}

// MARK: - Extracted Binding Functions

extension ContentView {
    private func bindingForWeight(at index: Int) -> Binding<String> {
        Binding(
            get: { setRecords[index].weight ?? "" },
            set: { setRecords[index].weight = $0 }
        )
    }

    private func bindingForReps(at index: Int) -> Binding<String> {
        Binding(
            get: { setRecords[index].reps.map { String($0) } ?? "" },
            set: { setRecords[index].reps = Int($0) }
        )
    }

    private func bindingForElapsedTime(at index: Int) -> Binding<String> {
        Binding(
            get: { setRecords[index].elapsedTime ?? "" },
            set: { setRecords[index].elapsedTime = $0 }
        )
    }

    private func bindingForDistance(at index: Int) -> Binding<String> {
        Binding(
            get: { setRecords[index].distance ?? "" },
            set: { setRecords[index].distance = $0 }
        )
    }

    private func bindingForCalories(at index: Int) -> Binding<String> {
        Binding(
            get: { setRecords[index].calories ?? "" },
            set: { setRecords[index].calories = $0 }
        )
    }

    private func bindingForCustomNotes(at index: Int) -> Binding<String> {
        Binding(
            get: { setRecords[index].custom ?? "" },
            set: { setRecords[index].custom = $0 }
        )
    }
}
